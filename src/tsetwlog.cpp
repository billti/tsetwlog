#include "tsetwlog.h"
#include "activity-stack.h"

TRACELOGGING_DEFINE_PROVIDER(
	g_hMyProvider,
	"tsserverEventSource",
	// GUID generated by https://blogs.msdn.microsoft.com/dcook/2015/09/08/etw-provider-names-and-guids/
	// {ac4e9dd1-3a7a-5022-fc37-f2394bc4f09e}
	(0xac4e9dd1, 0x3a7a, 0x5022, 0xfc, 0x37, 0xf2, 0x39, 0x4b, 0xc4, 0xf0, 0x9e));

namespace tsetwlog {
	ActivityStack<g_hMyProvider> *managedStack;

	constexpr size_t STRING_ARG_BUFFER_SIZE = 1024;
	// Holds the string arguments during conversion
	wchar_t chBuf1[STRING_ARG_BUFFER_SIZE], chBuf2[STRING_ARG_BUFFER_SIZE], chBuf3[STRING_ARG_BUFFER_SIZE];

	void InitEtw() {
		managedStack = new ActivityStack<g_hMyProvider>();
		TraceLoggingRegister(g_hMyProvider);
	}

	void CleanupEtw(void *arg)
	{
		TraceLoggingUnregister(g_hMyProvider);
		delete managedStack;
	}

	// argIndex is 1-based, i.e. specify 1 to get the first argument.
	bool GetStringArg(napi_env env, napi_callback_info cb_info, size_t argIndex, wchar_t* pArg) {
		if (argIndex > 5) return false; // Only support up to 5 args.

		napi_value result[5];
		size_t argCount = 5;
		napi_valuetype valueType;
		napi_value thisArg;
		void *pData;
		size_t written;

		napi_status status = pnapi_get_cb_info(env, cb_info, &argCount, result, &thisArg, &pData);
		if (status != napi_ok || argCount < argIndex) return false;

		status = pnapi_typeof(env, result[argIndex - 1], &valueType);
		if (status != napi_ok || valueType != napi_valuetype::napi_string) return false;

		status = pnapi_get_value_string_utf16(env, result[argIndex - 1], (char16_t*)pArg, STRING_ARG_BUFFER_SIZE, &written);
		if (status != napi_ok) return false;

		return true;
	}

	void LogActivityWarning(wchar_t *pMsg, wchar_t *pType) {
		TraceLoggingWrite(g_hMyProvider, 
			"ActivityError", 
			TraceLoggingLevel(WINEVENT_LEVEL_WARNING),
			TraceLoggingWideString(pMsg, "msg"),
			TraceLoggingWideString(pType, "activityType"));
	}

	napi_value LogEvent(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		TraceLoggingWrite(g_hMyProvider,
			"Message",
			TraceLoggingLevel(WINEVENT_LEVEL_VERBOSE),
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogErrEvent(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		TraceLoggingWrite(g_hMyProvider,
			"Err",
			TraceLoggingLevel(WINEVENT_LEVEL_ERROR),
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogInfoEvent(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		TraceLoggingWrite(g_hMyProvider,
			"Info",
			TraceLoggingLevel(WINEVENT_LEVEL_VERBOSE),
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogPerfEvent(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		TraceLoggingWrite(g_hMyProvider,
			"Perf",
			TraceLoggingKeyword(TSSERVER_KEYWORD_PERF),
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogStartCommand(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;
		if (!GetStringArg(env, args, 2, chBuf2)) return nullptr;
		bool hasGUID = GetStringArg(env, args, 3, chBuf3);

		GUID relatedGUID;
		if (hasGUID) {
			hasGUID = StringToGuid(chBuf3, relatedGUID);
		}

		auto pActivity = hasGUID ? managedStack->AddActivityWithParent(relatedGUID) : managedStack->AddActivity();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStart(*pActivity, "Command",
			TraceLoggingWideString(chBuf1, "command"),
			TraceLoggingWideString(chBuf2, "msg")
		);

		return nullptr;
	}

	napi_value LogStopCommand(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;
		if (!GetStringArg(env, args, 2, chBuf2)) return nullptr;

		auto pActivity = managedStack->Top();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStop(*pActivity, "Command",
			TraceLoggingWideString(chBuf1, "command"),
			TraceLoggingWideString(chBuf2, "msg")
		);

		managedStack->Pop();
		return nullptr;
	}

	napi_value LogStartUpdateProgram(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		auto pActivity = managedStack->AddActivity();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStart(*pActivity, "UpdateProgram",
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogStopUpdateProgram(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		auto pActivity = managedStack->Top();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStop(*pActivity, "UpdateProgram",
			TraceLoggingWideString(chBuf1, "msg")
		);

		managedStack->Pop();
		return nullptr;
	}

	napi_value LogStartUpdateGraph(napi_env env, napi_callback_info args) {
		auto pActivity = managedStack->AddActivity();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStart(*pActivity, "UpdateGraph");

		return nullptr;
	}

	napi_value LogStopUpdateGraph(napi_env env, napi_callback_info args) {
		auto pActivity = managedStack->Top();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStop(*pActivity, "UpdateGraph");

		managedStack->Pop();
		return nullptr;
	}

	napi_value LogStartResolveModule(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		auto pActivity = managedStack->AddActivity();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStart(*pActivity, "ResolveModule",
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogStopResolveModule(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		auto pActivity = managedStack->Top();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStop(*pActivity, "ResolveModule", TraceLoggingWideString(chBuf1, "msg"));
		managedStack->Pop();
		return nullptr;
	}

	napi_value LogStartParseSourceFile(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		auto pActivity = managedStack->AddActivity();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStart(*pActivity, "ParseSourceFile",
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogStopParseSourceFile(napi_env env, napi_callback_info args) {
		auto pActivity = managedStack->Top();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStop(*pActivity, "ParseSourceFile");
		managedStack->Pop();
		return nullptr;
	}
	napi_value LogStartReadFile(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		auto pActivity = managedStack->AddActivity();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStart(*pActivity, "ReadFile",
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogStopReadFile(napi_env env, napi_callback_info args) {
		auto pActivity = managedStack->Top();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStop(*pActivity, "ReadFile");
		managedStack->Pop();
		return nullptr;
	}
	napi_value LogStartBindFile(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		auto pActivity = managedStack->AddActivity();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStart(*pActivity, "BindFile",
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}

	napi_value LogStopBindFile(napi_env env, napi_callback_info args) {
		auto pActivity = managedStack->Top();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStop(*pActivity, "BindFile");
		managedStack->Pop();
		return nullptr;
	}

	napi_value LogStartScheduledOperation(napi_env env, napi_callback_info args) {
		if (!GetStringArg(env, args, 1, chBuf1)) return nullptr;

		auto pActivity = managedStack->AddActivity();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStart(*pActivity, "ScheduledOperation",
			TraceLoggingWideString(chBuf1, "msg")
		);

		return nullptr;
	}
	napi_value LogStopScheduledOperation(napi_env env, napi_callback_info args) {
		auto pActivity = managedStack->Top();
		if (pActivity == nullptr) return nullptr;

		TraceLoggingWriteStop(*pActivity, "ScheduledOperation");
		managedStack->Pop();
		return nullptr;
	}
} // namespace tsetwlog
